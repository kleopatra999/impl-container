
// Copyright (c) 2012-2016 niXman (i dot nixman dog gmail dot com). All
// rights reserved.
//
// This file is part of impl-container(https://github.com/niXman/impl-container)
// project.
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#include <boost/mpl/unique.hpp>
#include <boost/mpl/equal.hpp>
#include <boost/mpl/size.hpp>
#include <boost/mpl/vector.hpp>
#include <boost/mpl/placeholders.hpp>

#include <boost/fusion/container/map.hpp>
#include <boost/fusion/include/map.hpp>
#include <boost/fusion/container/map/map_fwd.hpp>
#include <boost/fusion/include/map_fwd.hpp>
#include <boost/fusion/support/pair.hpp>
#include <boost/fusion/include/pair.hpp>
#include <boost/fusion/sequence/intrinsic/has_key.hpp>
#include <boost/fusion/include/has_key.hpp>
#include <boost/fusion/sequence/intrinsic/at_key.hpp>
#include <boost/fusion/include/at_key.hpp>

#include <boost/type_traits/is_same.hpp>

/***************************************************************************/

template<typename... Types>
struct impl_container {
	template<typename... Args>
	impl_container(Args&&... args)
		:cont(boost::fusion::make_pair<Types>(std::forward<Args>(args)...)...)
	{}

	template<typename T>
	T& get() {
		enum { value = boost::fusion::result_of::has_key<cont_type, T>::value };
		static_assert(value, "impl_container doesn't contains this type");
		return checker_helper<void, value>::template apply<T>(cont);
	}

	template<typename T>
	const T& get() const {
		enum { value = boost::fusion::result_of::has_key<cont_type, T>::value };
		static_assert(value, "impl_container doesn't contains this type");
		return checker_helper<void, value>::template apply<T>(cont);
	}

private:
	template<typename, bool>
	struct checker_helper;

	template<typename Fake>
	struct checker_helper<Fake, true> {
		template<typename T, typename Map>
		static const T& apply(const Map& map) {
			return boost::fusion::at_key<T>(map);
		}

		template<typename T, typename Map>
		static T& apply(Map& map) {
			return boost::fusion::at_key<T>(map);
		}
	};
	template<typename Fake>
	struct checker_helper<Fake, false> {
		template<typename T, typename Map>
		static const T& apply(const Map&) {}

		template<typename T, typename Map>
		static T& apply(Map&) {}
	};

private:
	using cont_type = boost::fusion::map<
		boost::fusion::pair<Types, Types>...
	>;

	cont_type cont;

private:
	using _1 = boost::mpl::placeholders::_1;
	using _2 = boost::mpl::placeholders::_2;

	using types = boost::mpl::vector<Types...>;
	static_assert(
		 boost::mpl::size<
			typename boost::mpl::unique<types, boost::is_same<_1, _2>>::type
		 >::value == sizeof...(Types)
		,"only unique types allowed"
	);
};

/***************************************************************************/
